name: Continuous Integration

on:
  push:
    branches:
      - main

jobs:
  testing:
    name: testing
    uses: yankeeinlondon/gha/.github/workflows/test.yml@main

  detect_platforms:
    name: Detect Publishing Platforms
    if: contains(github.event.head_commit.message, 'release v')
    needs: 
      - testing
    runs-on: ubuntu-latest
    outputs:
      npm: ${{ steps.platform-detection.outputs.npm }}
      jsr: ${{ steps.platform-detection.outputs.jsr }}
      github_packages: ${{ steps.platform-detection.outputs.github_packages }}
      platforms: ${{ steps.platform-detection.outputs.platforms }}
      has_npm_token: ${{ steps.platform-detection.outputs.has_npm_token }}
    steps:
      - name: Early Problem Detection - Check Workflow Permissions
        run: |
          echo "Checking workflow permissions..."
          
          # Try the repository actions permissions endpoint
          echo "Attempting to check repository actions permissions..."
          REPO_ACTIONS=$(curl -s -w "HTTP_STATUS:%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/permissions")
          
          HTTP_STATUS=$(echo "$REPO_ACTIONS" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$REPO_ACTIONS" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "HTTP Status: $HTTP_STATUS"
          echo "Response:"
          echo "$RESPONSE_BODY" | jq '.' 2>/dev/null || echo "$RESPONSE_BODY"
          
          if [ "$HTTP_STATUS" = "200" ]; then
            # Check if we can see enabled/allowed_actions
            ENABLED=$(echo "$RESPONSE_BODY" | jq -r '.enabled // "unknown"')
            ALLOWED_ACTIONS=$(echo "$RESPONSE_BODY" | jq -r '.allowed_actions // "unknown"')
            
            echo "Actions enabled: $ENABLED"
            echo "Allowed actions: $ALLOWED_ACTIONS"
            
            # Now try the workflow permissions endpoint
            echo ""
            echo "Checking default workflow permissions..."
            WORKFLOW_PERMS=$(curl -s -w "HTTP_STATUS:%{http_code}" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/actions/permissions/workflow")
            
            WF_HTTP_STATUS=$(echo "$WORKFLOW_PERMS" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
            WF_RESPONSE_BODY=$(echo "$WORKFLOW_PERMS" | sed 's/HTTP_STATUS:[0-9]*$//')
            
            echo "Workflow permissions HTTP Status: $WF_HTTP_STATUS"
            echo "Workflow permissions response:"
            echo "$WF_RESPONSE_BODY" | jq '.' 2>/dev/null || echo "$WF_RESPONSE_BODY"
            
            if [ "$WF_HTTP_STATUS" = "200" ]; then
              DEFAULT_PERMS=$(echo "$WF_RESPONSE_BODY" | jq -r '.default_workflow_permissions // "unknown"')
              echo "Default workflow permissions: $DEFAULT_PERMS"
              
              if [ "$DEFAULT_PERMS" = "write" ]; then
                echo "✅ Workflow permissions are correctly set to 'write'"
              elif [ "$DEFAULT_PERMS" = "read" ]; then
                echo "::error::Workflow permissions are set to 'read' - changelogithub will fail!"
                echo "::error::Go to Settings > Actions > General > Workflow permissions"
                echo "::error::Change to 'Read and write permissions'"
                exit 1
              else
                echo "::warning::Unknown permissions setting: $DEFAULT_PERMS"
              fi
            else
              echo "::warning::Cannot check workflow permissions (HTTP $WF_HTTP_STATUS)"
            fi
          else
            echo "::warning::Cannot check repository actions permissions (HTTP $HTTP_STATUS)"
            echo "::warning::If changelogithub fails, check Settings > Actions > General > Workflow permissions"
          fi

      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Detect Publishing Platforms
        id: platform-detection
        run: |
          # NPM Detection
          NPM=""
          if [ -f "package.json" ] && [ ! -f ".skip-npm" ]; then
            PRIVATE=$(cat package.json | jq -r '.private // false')
            if [ "$PRIVATE" != "true" ]; then
              NPM="npm"
            fi
          elif [ -f ".skip-npm" ]; then
            echo "ℹ️ Skipping NPM publication (found .skip-npm file)"
          fi
          
          # JSR Detection
          JSR=""
          if ([ -f "deno.json" ] || [ -f "deno.jsonc" ] || [ -f "jsr.json" ] || [ -f "jsr.jsonc" ]) && [ ! -f ".skip-jsr" ]; then
            JSR="jsr"
          elif [ -f ".skip-jsr" ]; then
            echo "ℹ️ Skipping JSR publication (found .skip-jsr file)"
          fi
          
          # GitHub Packages Detection
          GITHUB_PACKAGES=""
          if [ -f ".npmrc.github" ] && [ ! -f ".skip-github-packages" ]; then
            GITHUB_PACKAGES="Github packages"
          elif [ -f ".skip-github-packages" ]; then
            echo "ℹ️ Skipping GitHub Packages publication (found .skip-github-packages file)"
          fi
          
          # Generate platform list
          PLATFORMS=""
          PLATFORM_ARRAY=()
          [ -n "$NPM" ] && PLATFORM_ARRAY+=("$NPM")
          [ -n "$JSR" ] && PLATFORM_ARRAY+=("$JSR")
          [ -n "$GITHUB_PACKAGES" ] && PLATFORM_ARRAY+=("$GITHUB_PACKAGES")
          
          # Join array elements with comma and space
          IFS=", "
          PLATFORMS="${PLATFORM_ARRAY[*]}"
          
          # Check NPM token availability (temporarily disabled for testing)
          HAS_NPM_TOKEN="true"  # Set to true to bypass check during testing
          
          # Set outputs
          echo "npm=$NPM" >> $GITHUB_OUTPUT
          echo "jsr=$JSR" >> $GITHUB_OUTPUT
          echo "github_packages=$GITHUB_PACKAGES" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "has_npm_token=$HAS_NPM_TOKEN" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "Detected registry platforms: $PLATFORMS"
          echo "NPM: '$NPM', JSR: '$JSR', GitHub Packages: '$GITHUB_PACKAGES'"
          echo "Has NPM Token: '$HAS_NPM_TOKEN' (bypassed for testing)"

      - name: "Early Problem Detection - NPM Token"
        if: steps.platform-detection.outputs.npm != '' && steps.platform-detection.outputs.has_npm_token == 'false'
        run: |
          echo "::warning::NPM is a target platform but NPM_TOKEN secret is missing or empty!"
          echo "NPM detected: ${{ steps.platform-detection.outputs.npm }}"
          echo "Has NPM Token: ${{ steps.platform-detection.outputs.has_npm_token }}"
          exit 16
      - name: "Ready"
        run: |
          echo "ready to publish"
          echo "::notice::Ready to publish to the following registry platforms: ${{ steps.platform-detection.outputs.platforms }}"


  publish_npm:
    name: Publish to npm
    if: ( contains(github.event.head_commit.message, 'release v') && needs.detect_platforms.outputs.npm != '' )
    needs:
      - detect_platforms
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - name: Install pnpm
        run: npm i -g pnpm @antfu/ni
      - name: Clean Install
        run: pnpm install
      - name: Build
        run: nr build
      - name: Check NPM Token Secret
        run: |
          echo "Checking NPM_TOKEN secret availability..."
          if [ -z "$NPM_TOKEN_VALUE" ]; then
            echo "::error::NPM_TOKEN secret is not accessible!"
            echo "::error::Please verify NPM_TOKEN is set in repository secrets"
            echo "::error::Go to Settings > Secrets and variables > Actions > Repository secrets"
            exit 1
          else
            echo "✅ NPM_TOKEN secret is accessible"
            echo "Token length: ${#NPM_TOKEN_VALUE} characters"
          fi
        env:
          NPM_TOKEN_VALUE: ${{ secrets.NPM_TOKEN }}
      - name: Verify NPM Authentication
        run: |
          echo "Debugging authentication setup..."
          echo "NODE_AUTH_TOKEN is set: $([ -n "$NODE_AUTH_TOKEN" ] && echo 'YES' || echo 'NO')"
          if [ -n "$NODE_AUTH_TOKEN" ]; then
            echo "NODE_AUTH_TOKEN length: ${#NODE_AUTH_TOKEN} characters"
          fi
          echo "NPM config userconfig: $NPM_CONFIG_USERCONFIG"
          echo "Current .npmrc contents:"
          cat ~/.npmrc 2>/dev/null || echo "No ~/.npmrc file found"
          if [ -f "$NPM_CONFIG_USERCONFIG" ]; then
            echo "NPM userconfig file contents:"
            cat "$NPM_CONFIG_USERCONFIG"
          fi
          echo ""
          echo "Testing authentication..."
          if npm whoami; then
            echo "✅ NPM authentication successful"
          else
            echo "❌ NPM authentication failed"
            echo "Trying to ping registry..."
            npm ping --registry https://registry.npmjs.org/
            exit 99
          fi
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - name: Check Package Existence and Access Level
        id: npm-check
        run: |
          PACKAGE_NAME=$(cat package.json | jq -r '.name')
          echo "Checking if package '$PACKAGE_NAME' exists on NPM..."
          
          if npm view "$PACKAGE_NAME" --json 2>/dev/null; then
            echo "✅ Package exists on NPM"
            # Get current access level
            ACCESS_LEVEL=$(npm view "$PACKAGE_NAME" --json | jq -r '.access // "public"')
            echo "Current access level: $ACCESS_LEVEL"
            echo "access_level=$ACCESS_LEVEL" >> $GITHUB_OUTPUT
            echo "package_exists=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Package '$PACKAGE_NAME' does not exist on NPM registry"
            echo "::error::Please create the package first by running 'npm publish --access public' or 'npm publish --access restricted' locally"
            echo "::error::This workflow only publishes updates to existing packages to preserve access settings"
            exit 199
          fi
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - name: Publish to NPM
        run: |
          ACCESS_FLAG=""
          if [ "${{ steps.npm-check.outputs.access_level }}" != "null" ] && [ "${{ steps.npm-check.outputs.access_level }}" != "" ]; then
            ACCESS_FLAG="--access ${{ steps.npm-check.outputs.access_level }}"
          fi
          echo "Publishing with access level: ${{ steps.npm-check.outputs.access_level }}"
          npm publish $ACCESS_FLAG
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  publish_jsr:
    name: Publish to jsr
    if: ( contains(github.event.head_commit.message, 'release v') && needs.detect_platforms.outputs.jsr != '' )
    needs:
      - detect_platforms
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - run: pnpm install --frozen-lockfile
      - name: Publish to JSR
        run: npx jsr publish

  publish_github:
    name: Publish to Github Packages
    if: ( contains(github.event.head_commit.message, 'release v') && needs.detect_platforms.outputs.github_packages != '' )
    needs:
      - detect_platforms
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Install pnpm
        run: npm i -g pnpm @antfu/ni
      - name: Setup GitHub Packages registry  
        run: |
          echo "Before copying .npmrc.github:"
          cat .npmrc.github
          cp .npmrc.github .npmrc
          echo "Contents of .npmrc after copy:"
          cat .npmrc
      - name: Clean Install (using pnpm)
        run: pnpm install
      - name: Build
        run: nr build
      - name: Verify GitHub Packages Authentication
        run: |
          echo "Testing GitHub Packages registry access..."
          if npm whoami --registry https://npm.pkg.github.com/ 2>/dev/null; then
            echo "✅ GitHub Packages authentication successful"
          else
            echo "⚠️ whoami failed (expected with GITHUB_TOKEN), testing access differently..."
            # Test by trying to access the registry
            curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github+json" \
                 "https://api.github.com/user" | jq '.login' || {
              echo "❌ GitHub authentication failed"
              exit 1
            }
            echo "✅ GitHub authentication verified via API"
          fi
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Publish to GitHub Packages
        run: npm publish --registry https://npm.pkg.github.com/
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  publish_success:
    name: "Publication Successful"
    if: ( !failure() && contains(github.event.head_commit.message, 'release v') )
    needs:
      - publish_npm
      - publish_github
      - publish_jsr
      - detect_platforms
    runs-on: ubuntu-latest
    steps:
      - name: Create Changelog Entry
        run: npx changelogithub
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Done
        env:
          HAS_NPM_TOKEN: ${{ needs.detect_platforms.outputs.has_npm_token }}
          NPM: ${{ needs.detect_platforms.outputs.npm }}
          JSR: ${{ needs.detect_platforms.outputs.jsr }}
          GITHUB_PACKAGES: ${{ needs.detect_platforms.outputs.github_packages }}
          PLATFORMS: ${{ needs.detect_platforms.outputs.platforms }}
        run: |
          echo "::notice :: ${{ github.actor }} published from ${{github.ref_type}} ${{ github.ref_name }} to ${{ env.PLATFORMS }} and updated the repo's changelog entry 🚀"

  publish_failure:
    name: "Publication Failure"
    if: ( failure() && contains(github.event.head_commit.message, 'release v') )
    needs: 
      - publish_npm
      - publish_github
      - publish_jsr
      - detect_platforms
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo for tag removal
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Analyze Failure"
        continue-on-error: true
        run: |
          echo "::error::Publication workflow failed"
          
          # Check individual job results
          DETECT_STATUS="${{ needs.detect_platforms.result }}"
          NPM_STATUS="${{ needs.publish_npm.result }}"
          JSR_STATUS="${{ needs.publish_jsr.result }}"
          GITHUB_STATUS="${{ needs.publish_github.result }}"
          
          FAILED_JOBS=()
          
          # Check each job status
          if [ "$DETECT_STATUS" == "failure" ]; then
            FAILED_JOBS+=("Platform Detection")
            echo "::error::Platform Detection (early error detection) job failed"
          fi
          
          if [ "$NPM_STATUS" == "failure" ]; then
            FAILED_JOBS+=("NPM Publishing")
            echo "::error::NPM Publishing job failed"
          fi
          
          if [ "$JSR_STATUS" == "failure" ]; then
            FAILED_JOBS+=("JSR Publishing")
            echo "::error::JSR Publishing job failed"
          fi
          
          if [ "$GITHUB_STATUS" == "failure" ]; then
            FAILED_JOBS+=("GitHub Packages Publishing")
            echo "::error::GitHub Packages Publishing job failed"
          fi
          
          # Create summary
          if [ ${#FAILED_JOBS[@]} -gt 0 ]; then
            IFS=", "
            FAILED_LIST="${FAILED_JOBS[*]}"
            echo "::notice::Failed jobs: $FAILED_LIST"
            echo "::notice::Job statuses - Platform Detection: $DETECT_STATUS, NPM: $NPM_STATUS, JSR: $JSR_STATUS, GitHub: $GITHUB_STATUS"
          else
            echo "::warning::No specific job failures detected, but workflow failed overall"
          fi
          
      - name: "Remove Tag"
        continue-on-error: true
        run: |
          echo "Publication failed. Looking for tag to remove..."
          
          # Since workflow is triggered by commit message "release v", we need to find the tag
          # First, try to extract version from commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"
          
          # Extract version from commit message (e.g., "release v1.2.3" -> "v1.2.3")
          TAG_FROM_MSG=$(echo "$COMMIT_MSG" | grep -o "release v[0-9][^[:space:]]*" | sed 's/release //')
          
          # Also try to get version from package.json
          PACKAGE_VERSION=$(cat package.json | jq -r '.version')
          TAG_FROM_PACKAGE="v$PACKAGE_VERSION"
          
          echo "Tag from commit message: $TAG_FROM_MSG"
          echo "Tag from package.json: $TAG_FROM_PACKAGE"
          
          # Use commit message tag if available, otherwise package.json
          if [ -n "$TAG_FROM_MSG" ]; then
            TAG="$TAG_FROM_MSG"
          else
            TAG="$TAG_FROM_PACKAGE"
          fi
          
          echo "Attempting to remove tag: $TAG"
          
          # Check if the tag exists
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG}$"; then
            echo "Tag ${TAG} exists, removing it..."
            if git push origin ":refs/tags/${TAG}"; then
              echo "::notice::Successfully removed tag ${TAG} from repository"
            else
              echo "::error::Failed to remove tag ${TAG} - you may need to remove it manually"
              echo "::error::Run: git push origin :refs/tags/${TAG}"
            fi
          else
            echo "::warning::Tag ${TAG} does not exist or was already removed"
            echo "Available tags:"
            git ls-remote --tags origin | head -5
          fi
      - name: "Cancel Workflow"
        run: |
          echo "::notice::Tests passed but publication failed - cancelling workflow to indicate controlled failure"
          # Use the GitHub API to cancel the workflow
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel"
